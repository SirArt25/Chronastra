@startuml
class Event{
    + Event(is_all_day: bool, start_date: Date, end_date: Date, title: string, url: string, resource_id: string,
        group_id: string)
    + setAllDay(is_all_day: bool): void
    + IsAllDay(): bool
    + setStartDate(start_date: Date): void
    + getStartDate(): Date
    + setEndDate(end_date: Date): void
    + getEndDate(): Date
    + setStartStr(start_str: string): void
    + getStartStr(): string
    + setTitle(title: string): void
    + getTitle(): string
    + setUrl(url: string): void
    + getUrl(): string
    ===
    - id: string
    - group_id: string
    - is_all_day: bool
    - start_date: Date
    - end_date: Date
    - start_str: string
    - title: string
    - url: string
    - resource_id: string
}


class EventFormatter{
    {static} + to_skit_lean(event: Event): Dict
    {static} + to_outlook(event: Event): Unknown
}

class EventsExporter{
    {static} + to_json(collection<Event>: events): void
    {static} + to_xml(collection<Event>: events): void
}

class EventsImporter{
    {static} + from_json(json_file: File): collection<Event>
    {static} + from_xml(xml_file: File): collection<Event>
}

class StCalendar{
    + StCalendar(style: string, mode_opt: string, events: collection<Event>, calendar_opts: collection<Options>)
    ===
    + setStyle(style: string): void
    + getStyle(): string
    ===
    + setEvents(events: collection<Options>)
    + getEvents(): collection<Event>
    + addEvent(event: Event): void
    + removeEvent(id: collection_id): void
    ===
    + getCalendarOpts(): collection<Option>
    + setCalendarOpts(options: collection<Option>): void
    + addCalendarOpt(option: Option): void
    + removeCalendarOpt(id: collection_id): void
    ===
    - mode: st.selectbox
    - style: string
    - events: collection<Event>
    - calendar_opts: collection<Option>
    - current_calendar_opt: Option
    - calendar_wrapper: st.calendar
}

StCalendar o-- Event
Event ..> EventFormatter : dependency
Event ..> EventsExporter : dependency
Event ..> EventsImporter : dependency
@enduml